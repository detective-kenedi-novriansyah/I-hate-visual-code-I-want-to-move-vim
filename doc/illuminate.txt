*vim-illuminate.txt*
*illuminate.txt*  Vim plugin for selectively illuminating other uses of
                the current word

Author:  Adam P. Regasz-Rethy (RRethy) <rethy.spud@gmail.com>
License: Same terms as Vim itself (see |license|)

===============================================================================
CONTENTS                                                  *illuminate-contents*

  1. Introduction.........................|illuminate-introduction|
  2. Configuration........................|illuminate-configuration|
  3. Commands.............................|illuminate-commands|

===============================================================================
1. Introduction                                       *illuminate-introduction*

This plugin is a tool for illuminating the other uses of the current word
under the cursor.

vim-illuminate will by default highlight all uses of the word under the cursor,
but with a little bit of configuration it can easily only highlight what you
want it to highlight based on the filetype and highlight-groups.

vim-illuminate will also do a few other niceties such as delaying the highlight
for a user-defined amount of time based on `g:Illuminate_delay` (by default
250), it will interact nicely with search highlighting, jumping around
between buffers, jumping around between windows, and won't illuminate
while in insert mode (unless told to).

===============================================================================
2. Configuration                                     *illuminate-configuration*

*g:Illuminate_ftHighlightGroups*

                Type: |Dict| of |String| to |List| of |String|

                Which highlight groups to match for a given filetype.  The
                keys should be |'filetype'| (or a regex to match filetypes).
                If you append `:blacklist` to the filetype key, then the
                ensuing values will be blacklisted rather than whitelisted.

                The list of strings provided are highlight groups which you
                can determine using either of the following: >
                  :echo synIDattr(synID(line("."), col("."), 1), "name")
                  :echo synIDattr(synIDtrans(synID(line("."), col("."), 1)), "name")
<
                Default value: >
                  let g:Illuminate_ftHighlightGroups = {}
<
                Sample values: >
                  " match the following three vimscript highlight groups
                  " Match Identifier for any filetype ending in c
                  " Don't match strings for python filetypes
                  let g:Illuminate_ftHighlightGroups = {
                          \ 'vim': ['vimVar', 'vimString', 'vimLineComment'],
                          \ '.*c$': ['Identifier'],
                          \ 'python:blacklist': ['String'],
                          \ }
<
*illuminatedWord*

                Type: |highlight-groups|

                Defines how to highlight other words (not under cursor).

                Default value: >
                  autocmd VimEnter * hi link illuminatedWord cursorline
<
                Sample value: >
                  autocmd VimEnter * hi illuminatedWord cterm=underline gui=underline
<
*illuminatedCurWord*

                Type: |highlight-groups|

                Defines how to highlight word under cursor.

                Default value: >
                  autocmd VimEnter * hi link illuminatedCurWord cursorline
<
                Sample value: >
                  autocmd VimEnter * hi illuminatedCurWord cterm=underline gui=underline
<
*g:Illuminate_ftblacklist*

                Type: |List| of |String|

                Which |'filetype'| to fully ignore.

                Default value: >
                  let g:Illuminate_ftblacklist = []
<
*g:Illuminate_ftwhitelist* = ['python', 'sh', 'nerdtree']

                Type: |List| of |String|

                Which |'filetype'| to exclusively highlight. This overrides
                the blacklist.

                Default value: >
                  let g:Illuminate_ftwhitelist = []
<
*g:Illuminate_delay*

                Type: |Number|
                Amount of time to wait before highlighting

                Default value: >
                  let g:Illuminate_delay = 250

*g:Illuminate_highlightUnderCursor*

                Type: |Number|
                Whether or not to highlight the word under the cursor.

                Default value: >
                  let g:Illuminate_highlightUnderCursor = 1

*g:Illuminate_highlightPriority*

                Type: |Number|
                Priority for the highlighting according to |matchadd|

                Default value: >
                  let g:Illuminate_highlightPriority = -1

*g:Illuminate_insert_mode_highlight*

                Type: |Number|

                Whether or not to highlight in insert mode.

                Default value: >
                  let g:Illuminate_insert_mode_highlight = 0
<
===============================================================================
3. Commands                                               *illuminate-commands*

Supplying a `!` after any of the following commands will cause them to act on
the current buffer rather than globally.

 ----------------------+-------------------------------------------------
 Command               | List                                                                  ~
 ----------------------+-------------------------------------------------
  `IlluminationDisable[!]`  | Disable the illumination
  `IlluminationEnable[!]`   | Enable the previously disabled illumination
  `IlluminationToggle[!]`   | Toggle the illumination
 ----------------------+-------------------------------------------------

===============================================================================
  vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl:
